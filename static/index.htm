<html>

<head>
  <title>INFO4310 - Boston Restaurants</title>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  
  <style>
    /* ALL TOOLTIP STYLES */
    #tooltip {
      position: absolute;
      padding: 2px;
      font: 12px sans-serif;
      background: white;
      border: 3px solid black;
      border-radius: 2px;
      pointer-events: none;
      opacity: 0;
      
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    #tooltip .row-1,
    #tooltip .row-2,
    #tooltip .row-3 {
      display: flex;
      align-items: center;
    }
    
    #tooltip p {
      margin-top: 5px;
      margin-bottom: 5px;
      font-size: 15px;
    }
    
    #tooltip .row-2 #rating {
      padding-right: 5px;
    }
    
    #tooltip .row-2 #review-count {
      padding-left: 5px;
    }
    
    #tooltip .row-3 p {
      width: 300px;
      margin-left: 10px;
      margin-right: 10px;
    }
    /* Styling for rest of page */
    body {
      /* background-color: #F9DBBB; */
      background-color: #F8F4EC;
      font-family: "Gill Sans",sans-serif;
      font-size:25;
    }
    #header{
      text-align: center;
    }
    .title {
      font-size: 50;
      color: #2E3840;
      width: 100%;
      text-align:center;
      align-items: center;
      justify-content: center;
      display: flex;
      flex-direction: horizontal;
    }
    .title h1{
      padding: 15;
    }
    #logo{
      max-width: 600px; 
      max-height: 150px;
    } 
    #coordinates {
      width: 100%;
      display: flex;
      justify-content: space-between;
    }
    .input {
      width: 250px;
      font-size: 25px;
    }
    #visandfil{
      width: 100%;
      justify-content: space-around;
      display: flex;
      font-size: 30px;
    }
    #cooranddis{
      padding: 10px;
      border: solid #FB4D42;
      border-radius : 20px;
      margin: 20px;
    }
    #cooranddis p{
      padding: 5;
    }
    #coordinates_input{
      display:flex;
      width: 100%;
      padding: 5;
      justify-content: space-around;
    }
    #filters{
      padding: 10px;
      border: solid #288BE4;
      border-radius : 20px;
      margin: 20px;
    }
    #inputandfilters{
      width: 50%;
    }
    #inputandfilters p {
      margin-top: 1px;
      margin-bottom: 1px;
    }
    .fil{
      display:flex;
      padding: 10;
      justify-content: center;
    }
    input[type='checkbox'] {
      width:30px;
      height:30px;
      border:2px solid #555;
    }
    #disandcate{
      display:flex;
      justify-content: space-around;
    }
    #select-category {
      width: 350px;
      margin: 10px;
      font-size: 25;
    }
    input[type='range'] {
      width:300px;
      height:30px;
    }
    #recommendation {
        padding: 10px;
        border: solid #a2b5cd;
        border-radius : 20px;
        margin: 20px;
    }
    #recommend-title {
        display: flex;
        align-items: center;
        margin-left: 20px;
    }
    #recommend-yelp-icon {
        width: 70px;
        height: 70px;
        padding-left: 30px;
    }
    #recommend-review {
        display: flex;
        align-items: flex-start;
    }
    #review-text {
        padding: 30px;;
        font: 38px sans-serif;
    }
    #recommend-img {
        width: 500px;
        height: 390px;
        border-radius: 12px;
        margin: 20px;
    }
    #categories-text {
        font: 28px sans-serif;
        margin-left: 20px;
    }
    #address-text {
        font: 26px sans-serif;
        color: #555;
        margin-left: 20px;
        padding-bottom: 20px;
    }
    
  </style>
  
</head>

<body>
  <div id = "header">
    <div class="title">
      <h1>Boston </h1>
      <img id = "logo" src="Yelp_Logo.png" alt="Yelp Logo">
      <h1>Recommendations</h1>
    </div> 
    <p>Amy Huang (ach243), Jonna Chen (jc2627), Kate Liang (ksl67), Stephanie Zhang (swz8)</p>
  </div>
  
  <div id = "visandfil"> 
    <div id="visualization">
      <div id="tooltip">
        <div class="row-1">
          <h1 id="restaurant-title"></h1>
        </div>
        <div class="row-2">
          <p id="rating"></p>
          <p id="review-count"></p>
        </div>
        <div class="row-3">
          <p id="snippet-text"></p>
        </div>
      </div>
      <svg id="bubbleplot" height="900" width = "1000"></svg>
    </div>
    
    <div id="inputandfilters">
      <div id = "cooranddis"> 
        <p> First, please use <a href="https://www.latlong.net/convert-address-to-lat-long.html"> this link </a> to determine the longitude and latitude of your origin location.</p>
        <p> These default values of longitude and latitude are that of the Boston City Hall and setting your origin as there.</p>
        <div id = "coordinates_input">
          <!-- look up the 'maximum and minimum' longitude and latitude coordinates of boston-->
          <div>
            <label for="longitude">&#128205; Longitude:</label>
            <input class = "input" type="number" id="longitude" name="longitude" size="50" min="10" max="100" value = -71.0594533> 
          </div>
          <div>
            <label for="latitude">&#128205; Latitude:</label>
            <input class = "input" type="number" id="latitude" name="latitude" size="50" min="10" max="100" value = 42.3602613>
          </div>
        </div>
      </div>
      <div id = "filters">
        <div id="disandcate">
          <div class = "fil">
            <label for="distance">Distance(in miles):</label>
            <input type="range" id="distance" name="distance"  min="0" max="30" step = "5" value = "30" oninput="this.nextElementSibling.value = this.value">
            <output>30</output>
          </div>
          
          <div id="categories" class = "fil">
            <p>Category: </p>
            <select id="select-category">
              <option value="None">None</option>
            </select>
          </div>
        </div>
        <div id="ratings" class = "fil">
          <p>Rating: </p>
          <div class = 'grouping'>
            <input class="ratingsBox" type="checkbox" id="one-star" name="chk" value="1">
            <label for="one-star">&#11088;</label>
          </div>
          <div class = 'grouping'>
            <input class="ratingsBox" type="checkbox" id="two-star" name="chk" value="2">
            <label for="two-star">&#11088; &#11088;</label>
          </div>
          <div class = 'grouping'>
            <input class="ratingsBox" type="checkbox" id="three-star" name="chk" value="3">
            <label for="three-star">&#11088;&#11088;&#11088;</label>
          </div>
          <div class = 'grouping'>
            <input class="ratingsBox" type="checkbox" id="four-star" name="chk" value="4">
            <label for="four-star">&#11088;&#11088;&#11088;&#11088;</label>
          </div>
          <div class = 'grouping'>
            <input class="ratingsBox" type="checkbox" id="five-star" name="chk" value="5">
            <label for="five-star">&#11088;&#11088;&#11088;&#11088;&#11088;</label>
          </div>
          
        </div>
        
        <div id="prices" class = "fil">
          <p>Price: </p>
          <div class = "grouping">
            <input class="priceBox" type="checkbox" id="one-dollar" name="chk" value="$">
            <label for="one-dollar">&#128176 </label>
          </div>
          <div class = "grouping">
            <input class="priceBox" type="checkbox" id="two-dollar" name="chk" value="$$">
            <label for="two-dollar">	&#128176	&#128176</label>
          </div>
          <div class = "grouping">
            <input class="priceBox" type="checkbox" id="three-dollar" name="chk" value="$$$">
            <label for="three-dollar">	&#128176	&#128176	&#128176</label>
          </div>
        </div>
      </div>
      <div id="recommendation" class="recommend-contain">
        <div id="recommend-title">
            <h1 id="recommendation-title">Most Recommended</h1>
            <img id="recommend-yelp-icon" src="yelp-icon.png" alt="Yelp Icon">
        </div>
        <div id="recommend-categories">
            <p id="categories-text"></p>
        </div>
        <div id="recommend-address">
            <p id="address-text"></p>
        </div>
        <div id="recommend-review">
            <img id="recommend-img" src="" alt="Image of the recommendation">
            <p id="review-text"></p>
        </div>
        <div></div>
      </div>
    </div>
  </div>
  <script>
    const svg = d3.select("#bubbleplot");
    const margins = { top: 10, right: 10, bottom: 10, left: 10 };
    const width = svg.attr("width");
    const height = svg.attr("height");
    const chartWidth = width - margins.left - margins.right;
    const chartHeight = height - margins.top - margins.bottom;
    
    let chartArea = svg.append("g");
    
    const minRadius = 5;
    const maxRadius = 30;
    
    const drawPlot = async () => {
      const yelpData = await d3.json("data.json");
      let categories = []
      
      let longitude_val = document.getElementById("longitude").value;
      let latitude_val = document.getElementById("latitude").value;
      
      let distance = document.getElementById("distance").value;
      document.getElementById("distance").addEventListener("change", (e) => {
        distance = document.getElementById("distance").value;
        console.log(longitude_val, latitude_val, distance)
      })
      
      yelpData.forEach(d => {
        d.latitude = Number(d.latitude);
        d.longitude = Number(d.longitude);
        d.rating = Number(d.rating);
        d.latitudeDistance = Number(Math.abs(d.latitude - latitude_val) * 69); // One degree of latitude equals approximately 364,000 feet (69 miles)
        d.longitudeDistance = Number(Math.abs(d.longitude - longitude_val) * 54.4); // One-degree of longitude equals 288,200 feet (54.6 miles)
        d.euclideanDistance = Number(Math.sqrt(Math.pow(d.latitudeDistance, 2) + Math.pow(d.longitudeDistance, 2)));
        
        // recalculates distance depending on change in longitude
        document.getElementById("longitude").addEventListener("change", (e) => {
          longitude_val = document.getElementById("longitude").value;
          d.latitudeDistance = Number(Math.abs(d.latitude - latitude_val) * 69); // One degree of latitude equals approximately 364,000 feet (69 miles)
          d.longitudeDistance = Number(Math.abs(d.longitude - longitude_val) * 54.4); // One-degree of longitude equals 288,200 feet (54.6 miles)
          d.euclideanDistance = Number(Math.sqrt(Math.pow(d.latitudeDistance, 2) + Math.pow(d.longitudeDistance, 2)));
        })
        // recalculates distance depending on change in latitude
        document.getElementById("latitude").addEventListener("change", (e) => {
          latitude_val = document.getElementById("latitude").value;
          d.latitudeDistance = Number(Math.abs(d.latitude - latitude_val) * 69); // One degree of latitude equals approximately 364,000 feet (69 miles)
          d.longitudeDistance = Number(Math.abs(d.longitude - longitude_val) * 54.4); // One-degree of longitude equals 288,200 feet (54.6 miles)
          d.euclideanDistance = Number(Math.sqrt(Math.pow(d.latitudeDistance, 2) + Math.pow(d.longitudeDistance, 2)));
        })
        
        switch (d["search category"]) {
          case "newamerican":
          d["search category"] = "New American"
          break;
          case "indpak":
          d["search category"] = "Indian-Pakistani"
          break;
          case "ethnicmarkets":
          d["search category"] = "Ethnic Markets"
          break;
          default:
          d["search category"] = d["search category"].charAt(0).toUpperCase() + d["search category"].slice(1)
        }
        
        if (!categories.includes(d["search category"])) {
          categories.push(d["search category"])
        }
      })
      const extent = d3.extent(yelpData, d => d.euclideanDistance);
      // Get all categories for dropdown filter
      categories.forEach(c => {
        d3.select("#select-category").append("option")
        .attr("value", c)
        .text(c);
        
      })

      // MOST RECOMMENDED
      var restaurantsSorted = yelpData.sort((a, b) => a.score - b.score).reverse();
      var mostRecommended = restaurantsSorted[0]
      
      // FILTERING 
      filterData()
      
      d3.selectAll("#select-category").on("change", filterData)
      d3.selectAll(".ratingsBox").on("change", filterData);
      d3.selectAll(".priceBox").on("change", filterData);
      d3.selectAll("#longitude").on("change", filterData);
      d3.selectAll("#latitude").on("change", filterData);
      d3.selectAll("#distance").on("change", filterData);
      
      function filterData() {
        chartArea.remove()
        
        chartArea = svg.append('g')
        
        let selectCategory = document.getElementById("select-category")
        var ratingsFiltered = filterRatings()
        var priceFiltered = filterPrice()
        
        var intersection = ratingsFiltered.filter(value => priceFiltered.includes(value));
        
        var filteredData = []
        
        if (selectCategory.value != "None") {
          for (let i = 0; i < intersection.length; i++) {
            if (intersection[i]["search category"] == selectCategory.value) {
              filteredData.push(intersection[i])
            }
          }
        } else {
          filteredData = intersection
        }
        
        filteredData = filteredData.filter(function (d) { return d.euclideanDistance <= distance })
        
        plotCircles(filteredData)

        var restaurantsSorted = filteredData.sort((a, b) => a.score - b.score).reverse();
        var mostRecommended = restaurantsSorted[0]
        updateRecommendationCard(mostRecommended);
      }
      
      function filterRatings() {
        var checkBoxes = document.getElementsByClassName('ratingsBox');
        
        var values = []
        for (let i = 0; i < checkBoxes.length; i++) {
          if (checkBoxes[i].checked) {
            values.push(Number(checkBoxes[i].value))
          }
        }
        
        if (values.length == 0) {
          return yelpData
        } else {
          var filteredData = yelpData.filter(function (d) {
            for (let i = 0; i < values.length; i++) {
              if (d.rating >= values[i] && d.rating < values[i] + 1) {
                return true
              }
            }
            return false
          });
          
          return filteredData
        }
      }
      
      function filterPrice() {
        var checkBoxes = document.getElementsByClassName('priceBox');
        var values = []
        for (let i = 0; i < checkBoxes.length; i++) {
          if (checkBoxes[i].checked) {
            values.push(checkBoxes[i].value)
          }
        }
        
        if (values.length == 0) {
          return yelpData
        } else {
          var filteredData = yelpData.filter(function (d) {
            for (let i = 0; i < values.length; i++) {
              if (d.price == values[i]) {
                return true
              }
            }
            return false
          });
          
          return filteredData
        }
      }
      
      
      // Drawing the plot 
      function plotCircles(data) {
        const sizeExtent = d3.extent(yelpData, d => d.rating);
        const sizeScale = d3.scaleLinear().domain(sizeExtent).range([minRadius, maxRadius]);
        
        const colors = ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#4e79a7", "#f28e2c", "#e15759", "#76b7b2", "#59a14f", "#edc949", "#af7aa1"];
        const colorScale = d3.scaleOrdinal().domain(categories).range(colors);
        
        var pack = d3.pack()
        .size([chartWidth, chartHeight])
        .padding(1.5)
        .radius(d => sizeScale(d.data.rating));
        
        var root = d3.hierarchy({ children: data })
        .sum(d => d.euclideanDistance)
        .sort(function (a, b) {
          return a.data.euclideanDistance - b.data.euclideanDistance;
        });
        
        var nodes = chartArea.selectAll(".node")
        .data(pack(root).leaves())
        .enter().append("g")
        .attr("class", "node")
        .attr("euclidean-dist", d => d.data.euclideanDistance)
        .attr("transform", d => `translate(${d.x + 1},${d.y + 1})`);
        
        var color = d3.scaleOrdinal(d3.schemeCategory10);
        nodes.append("circle")
        .attr("id", d => d.id)
        .attr("r", d => d.r)
        .attr("euclidean-dist", d => d.data.euclideanDistance)
        .style("fill", d => colorScale(d.data["search category"]))
        .on("mouseover", function (event, d) {
          d3.select(this)
          .transition().duration(200)
          .attr("stroke", "black")
          .attr("stroke-width", 4)
          .style("opacity", 1)
          
          updateTooltip(d.data)
        })
        .on("mouseout", function (event, d) {
          d3.select(this)
          .transition().duration(200)
          .attr("stroke", "")
          
          d3.select('#tooltip')
          .transition().duration(200)
          .style('opacity', 0)
        });
        
      }
      
      function updateTooltip(row) {
        d3.select('#tooltip')
        .transition().duration(200)
        .style('opacity', 1)
        .style("left", (event.pageX - 150) + "px")
        .style("top", (event.pageY - 200) + "px")
        
        d3.select("#restaurant-title").text(row.name_x)
        d3.select("#rating").text("Rating: " + row.rating)
        d3.select("#review-count").text("Review Count: " + row.review_count)
        d3.select("#snippet-text").text('"' + row.snippet_text + '"')
      }

      function updateRecommendationCard(mostRecommended) {
        console.log(mostRecommended)
        let recommendTitle = d3.select("#recommendation-title");
        let recommendYelp = d3.select("#recommend-yelp-icon");
        let recommendCategories = d3.select("#categories-text");
        let recommendAddress = d3.select("#address-text");
        let recommendImage = d3.select("#recommend-img");
        let recommendReview = d3.select("#review-text")

        recommendTitle.text(mostRecommended.name_x);
        recommendYelp.on("click", () => window.open(mostRecommended.url))
                     .style("cursor", "pointer");
        let categoriesText = "";
        mostRecommended.categories_hashtag.forEach(d => {
            categoriesText = `${categoriesText} ${d}`
        })
        recommendCategories.text(categoriesText);
        let addressJSON = JSON.parse(mostRecommended.location)
        recommendAddress.text(addressJSON.display_address)
        recommendImage.attr("src", mostRecommended.photo)
        recommendReview.text(mostRecommended.review)
      }
    }
    drawPlot();
  </script>
  
</body>

</html>