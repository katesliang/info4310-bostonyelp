<html>

<head>
    <title>INFO4310 - Boston Restaurants</title>

    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>

    <style>
        /* ALL TOOLTIP STYLES */
        #tooltip {
            position: absolute;
            padding: 2px;
            font: 12px sans-serif;
            background: white;
            border: 3px solid black;
            border-radius: 2px;
            pointer-events: none;
            opacity: 0;

            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #tooltip .row-1,
        #tooltip .row-2,
        #tooltip .row-3 {
            display: flex;
            align-items: center;
        }

        #tooltip p {
            margin-top: 5px;
            margin-bottom: 5px;
            font-size: 15px;
        }

        #tooltip .row-2 #rating {
            padding-right: 5px;
        }

        #tooltip .row-2 #review-count {
            padding-left: 5px;
        }

        #tooltip .row-3 p {
            width: 300px;
            margin-left: 10px;
            margin-right: 10px;
        }
    </style>

</head>

<body>
    <div class="title">
        <h1>Boston Restaurants</h1>
    </div>
    <div id="tooltip">
        <div class="row-1">
            <h1 id="restaurant-title"></h1>
        </div>
        <div class="row-2">
            <p id="rating"></p>
            <p id="review-count"></p>
        </div>
        <div class="row-3">
            <p id="snippet-text"></p>
        </div>
    </div>
    <svg id="bubbleplot" height="900" width="900"></svg>

    <script>
        const svg = d3.select("#bubbleplot");
        const margins = { top: 10, right: 10, bottom: 10, left: 10 };
        const width = svg.attr("width");
        const height = svg.attr("height");
        const chartWidth = width - margins.left - margins.right;
        const chartHeight = height - margins.top - margins.bottom;

        // Track current location in latitude and longitude
        // Default: Triangulated center of Boston
        let currentLocation = [42.360081, -71.058884]
        let chartArea = svg.append("g");

        const drawPlot = async () => {
            const yelpData = await d3.csv("yelp_boston.csv");

            yelpData.forEach(d => {
                d.latitude = Number(d.latitude);
                d.longitude = Number(d.longitude);
                d.latitudeDistance = Number(Math.abs(d.latitude - currentLocation[0]))
                d.longitudeDistance = Number(Math.abs(d.longitude - currentLocation[1]))
                d.rating = Number(d.rating);
            })

            const minRadius = 5;
            const maxRadius = 30;

            const xExtent = d3.extent(yelpData, d => d.longitudeDistance);
            const xScale = d3.scaleLinear().domain(xExtent).range([maxRadius * 2, chartWidth - maxRadius * 2]);

            const yExtent = d3.extent(yelpData, d => d.latitudeDistance);
            const yScale = d3.scaleLinear().domain(yExtent).range([chartHeight - maxRadius * 2, maxRadius * 2]);

            const sizeExtent = d3.extent(yelpData, d => d.rating);
            const sizeScale = d3.scaleLinear().domain(sizeExtent).range([minRadius, maxRadius]);

            const colors = ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#4e79a7", "#f28e2c", "#e15759", "#76b7b2", "#59a14f", "#edc949", "#af7aa1"];
            const colorExtent = new Set(yelpData.map(d => d.search_category))
            const colorScale = d3.scaleOrdinal().domain(colorExtent).range(colors);

            const circles = chartArea.selectAll("circle.point").data(yelpData)
                .join("circle")
                .attr("class", "point")
                .attr("label", d => d.name)
                .attr("cx", d => xScale(d.longitudeDistance))
                .attr("cy", d => yScale(d.latitudeDistance))
                .attr("r", d => sizeScale(d.rating))
                .attr("opacity", 0.8)
                .attr("fill", d => colorScale(d.search_category));

            const centerCircle = chartArea.append('circle')
                .attr("class", "center")
                .attr("label", "Current Location")
                .attr("cx", chartHeight / 2)
                .attr("cy", chartWidth / 2)
                .attr("r", 5)
                .attr("opacity", 1)
                .attr("fill", "black");

            const updateNodePos = () => {
                circles.attr("cx", d => d.x)
                    .attr("cy", d => d.y)
            }

            var simulation = d3.forceSimulation()
                .nodes(yelpData)
                .force("ypos", d3.forceY()
                    .y(chartHeight / 2))
                .force("xpos", d3.forceX()
                    .x(chartWidth / 2))
                .force("collide", d3.forceCollide().radius(d => sizeScale(d.rating) + 1))
                .force("center", d3.forceCenter(chartHeight / 2, chartWidth / 2))
                .on("tick", updateNodePos);

            // HOVER CARD INTERACTION
            circles.on("mouseover", function (event, d) {
                d3.select(this)
                    .transition().duration(200)
                    .attr("stroke", "black")
                    .attr("stroke-width", 4)
                    .style("opacity", 1)

                updateTooltip(d)

            });

            circles.on("mouseout", function (event, d) {
                d3.select(this)
                    .transition().duration(200)
                    .attr("stroke", "")
                    .attr("stroke-width", 1)
                    .style("opacity", 0.5)

                d3.select('#tooltip')
                    .transition().duration(200)
                    .style('opacity', 0)

            });

            function updateTooltip(row) {
                d3.select('#tooltip')
                    .transition().duration(200)
                    .style('opacity', 1)
                    .style("left", (event.pageX - 150) + "px")
                    .style("top", (event.pageY - 200) + "px")

                d3.select("#restaurant-title").text(row.name)
                d3.select("#rating").text("Rating: " + row.rating)
                d3.select("#review-count").text("Review Count: " + row.review_count)
                d3.select("#snippet-text").text('"' + row.snippet_text + '"')
            }

        }
        drawPlot();
    </script>
    </div>
</body>

</html>